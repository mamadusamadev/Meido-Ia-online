# Generated by Django 5.2.1 on 2025-06-02 16:21

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(help_text='Email único do usuário', max_length=255, unique=True, verbose_name='Email')),
                ('telefone', models.CharField(blank=True, help_text='Telefone no formato +245XXXXXXX', max_length=15, null=True, validators=[django.core.validators.RegexValidator(message='Formato de telefone inválido. Use +245XXXXXXX ou XXXXXXX', regex='^\\+245[0-9]{7}$|^[0-9]{7}$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designa se este usuário deve ser tratado como ativo.')),
                ('is_staff', models.BooleanField(default=False, help_text='Designa se o usuário pode acessar o site de administração.')),
                ('is_admin', models.BooleanField(default=False, help_text='Usuário tem acesso completo ao sistema')),
                ('is_paciente', models.BooleanField(default=False, help_text='Usuário é um paciente do sistema')),
                ('is_moderador', models.BooleanField(default=False, help_text='Usuário pode moderar consultas e conteúdo')),
                ('idioma_preferido', models.CharField(choices=[('pt', 'Português'), ('gcr', 'Crioulo da Guiné-Bissau'), ('fr', 'Francês')], default='pt', help_text='Idioma preferido da interface', max_length=3)),
                ('timezone_usuario', models.CharField(default='Africa/Bissau', help_text='Fuso horário do usuário', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Data de criação da conta')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Última atualização da conta')),
                ('ultimo_login_ip', models.GenericIPAddressField(blank=True, help_text='IP do último login', null=True)),
                ('tentativas_login', models.PositiveIntegerField(default=0, help_text='Número de tentativas de login falhadas')),
                ('conta_bloqueada_ate', models.DateTimeField(blank=True, help_text='Data até quando a conta está bloqueada', null=True)),
                ('receber_email_notificacoes', models.BooleanField(default=True, help_text='Receber notificações por email')),
                ('receber_sms_notificacoes', models.BooleanField(default=False, help_text='Receber notificações por SMS')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'db_table': 'usuarios_usuario',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LogAtividade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_atividade', models.CharField(choices=[('login', 'Login'), ('logout', 'Logout'), ('login_failed', 'Tentativa de Login Falhada'), ('password_change', 'Mudança de Senha'), ('profile_update', 'Atualização de Perfil'), ('consulta_create', 'Nova Consulta'), ('consulta_view', 'Visualização de Consulta'), ('relatorio_generate', 'Geração de Relatório'), ('admin_action', 'Ação Administrativa'), ('data_export', 'Exportação de Dados'), ('account_lock', 'Conta Bloqueada'), ('account_unlock', 'Conta Desbloqueada')], max_length=20)),
                ('descricao', models.TextField(help_text='Descrição detalhada da atividade')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, help_text='Informações do navegador/dispositivo')),
                ('dados_extras', models.JSONField(default=dict, help_text='Dados adicionais sobre a atividade')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='atividades', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Log de Atividade',
                'verbose_name_plural': 'Logs de Atividade',
                'db_table': 'usuarios_log_atividade',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PerfilSeguranca',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('two_factor_enabled', models.BooleanField(default=False, help_text='2FA habilitado')),
                ('two_factor_secret', models.CharField(blank=True, help_text='Chave secreta para 2FA', max_length=32)),
                ('recovery_codes', models.JSONField(default=list, help_text='Códigos de recuperação para 2FA')),
                ('historico_senhas', models.JSONField(default=list, help_text='Hash das últimas 5 senhas para evitar reutilização')),
                ('max_sessoes_simultaneas', models.PositiveIntegerField(default=3, help_text='Máximo de sessões simultâneas permitidas')),
                ('ultima_mudanca_senha', models.DateTimeField(auto_now_add=True, help_text='Data da última mudança de senha')),
                ('force_password_change', models.BooleanField(default=False, help_text='Forçar mudança de senha no próximo login')),
                ('permitir_login_multiplos_dispositivos', models.BooleanField(default=True, help_text='Permitir login em múltiplos dispositivos')),
                ('notificar_login_novo_dispositivo', models.BooleanField(default=True, help_text='Notificar sobre login em novo dispositivo')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('usuario', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='perfil_seguranca', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Perfil de Segurança',
                'verbose_name_plural': 'Perfis de Segurança',
                'db_table': 'usuarios_perfil_seguranca',
            },
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['email'], name='usuarios_us_email_41a027_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['is_active', 'is_paciente'], name='usuarios_us_is_acti_8bd595_idx'),
        ),
        migrations.AddIndex(
            model_name='usuario',
            index=models.Index(fields=['created_at'], name='usuarios_us_created_45364b_idx'),
        ),
        migrations.AddIndex(
            model_name='logatividade',
            index=models.Index(fields=['usuario', '-timestamp'], name='usuarios_lo_usuario_0df6a3_idx'),
        ),
        migrations.AddIndex(
            model_name='logatividade',
            index=models.Index(fields=['tipo_atividade', '-timestamp'], name='usuarios_lo_tipo_at_397f5e_idx'),
        ),
        migrations.AddIndex(
            model_name='logatividade',
            index=models.Index(fields=['ip_address'], name='usuarios_lo_ip_addr_743c31_idx'),
        ),
    ]
